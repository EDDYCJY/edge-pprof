// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x31\x6f\xdb\x30\x10\x85\xf7\xfb\x15\x5c\xd4\xad\x22\xdd\x21\x0d\x0c\x10\x45\x8a\xd4\xc8\xe2\x42\xb0\xda\x2e\x86\x06\x46\x3c\xc5\x44\x69\x1d\x41\x1e\x0d\xff\xfc\x82\x96\x83\xd0\x5d\xbc\x7e\xfc\xf0\xa0\x77\x4f\x7b\x13\xc2\x00\x4f\x21\xfc\x34\x47\xd4\x3f\xec\x1b\x76\x5d\xa4\xa9\x90\x3f\x18\x93\xa3\x59\xab\x56\xb5\x2b\xd8\xe5\x79\x4b\x16\xb5\xc5\x13\xc0\x3e\x61\x3c\x61\x1c\xe0\x85\x39\x3c\x59\x1b\x85\x16\x45\x53\xad\xba\xa0\x8e\x22\x0b\x2d\x1e\xd5\xa3\x02\xd8\x87\x48\x93\xf3\x38\x80\x94\x62\xb5\x16\x9e\x46\xe3\x3f\x17\x02\xbd\x39\x61\x49\x15\x5a\xac\xa0\x8b\xc4\x34\x92\x17\x5a\x1c\x98\x43\x2a\xa0\x58\xbf\x63\x41\x4d\x5a\x4b\xd9\xa4\xb6\x49\xeb\xc6\x4a\x8b\xaf\xf9\x4d\x86\x92\x2c\xaf\xf1\xf0\x82\x26\xdc\x73\x0f\x68\x02\x7c\xf7\x34\xfe\xbd\x67\xbe\x16\x09\xb6\x99\xf1\x7c\x4f\x3d\x16\x09\xfa\x3c\x4d\xee\xea\x7e\x4b\x38\xd2\x6c\x93\x6e\xec\x27\x76\x47\xa4\xcc\xba\xb1\x00\xcf\x38\x99\xec\xb9\x5f\x5e\x4b\x6b\xf5\xce\x7e\x2d\x9a\xd0\xe2\x41\xc1\xd6\x9c\x3f\x9c\x87\xea\x86\xed\x72\xc8\xeb\x65\x36\xce\x63\x17\x71\x72\x67\xa1\x2f\xf5\x6f\xc0\xa5\xe6\x0d\xb9\xb4\xb9\x21\xb7\xc1\x6d\x62\xc3\x6e\x1c\x60\xd3\xff\x37\x06\x6c\xfa\x67\x3a\x1a\x37\x97\x6f\xfe\xf2\xb5\x5d\xfe\x89\x4d\xbf\x43\x6f\xd8\x9d\xb0\x33\x7c\x10\x5a\x44\x4c\x94\xe3\x88\x55\x6e\xa4\xcc\x38\xc0\x8e\x88\xcb\xda\x57\xb1\x95\x31\xcf\xe5\x32\xef\x55\xaa\xb7\x7a\xcf\x0a\x7f\x4c\x57\xc1\x6a\xa5\x8a\x2e\x83\x00\xfc\x0b\x00\x00\xff\xff\x31\x16\xa8\xa0\xdd\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 733, mode: os.FileMode(420), modTime: time.Unix(1557051449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

