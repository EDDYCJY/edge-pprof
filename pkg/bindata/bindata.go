// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x8f\x9b\x30\x10\x85\xef\xf3\x2b\xe6\x42\x6f\x05\xb2\x87\xed\x2a\x92\x55\x6d\xb5\x45\xb9\xa4\x42\xa1\xed\x25\xe2\xe0\xc5\xc3\xc6\x2a\x61\x2c\x7b\x1c\xe5\xe7\x57\x86\x44\x21\xab\x5c\xbf\x37\xcc\xe3\xcd\xf3\x5e\x3b\xd7\xc2\xab\x73\xbf\xf4\x91\xd4\x4f\xf3\x41\x75\xed\xb9\x4f\xe4\x2f\xf9\x60\x79\x54\x65\x5e\xe6\x2b\xd8\xc5\x71\xcb\x86\x94\xa1\x13\xc0\x3e\x90\x3f\x91\x6f\x61\x23\xe2\x5e\x8d\xf1\xa8\x30\x8d\x95\x79\x39\xa1\x9a\xbd\xa0\xc2\x97\xf2\xa5\x04\xd8\x3b\xcf\xbd\x1d\xa8\x85\xa2\xc0\xd5\x1a\x07\xee\xf4\xf0\x35\x11\x68\xf4\x89\xd2\x56\x54\xb8\x82\xda\xb3\x70\xc7\x03\x2a\x3c\x88\xb8\x00\x1b\x0e\xb2\x42\x85\x59\x58\x17\x45\x16\xf2\x2c\xac\x33\x33\xd1\xa7\x1b\x4d\xa8\x9e\x0d\xfe\xf8\xf4\x6d\x61\xe8\x3d\x7e\x14\x2e\xb9\x16\x17\x6b\xd8\x90\x76\x0f\xe4\x03\x69\x07\x3f\x06\xee\xfe\x3d\x10\xdf\x13\x87\x6d\x14\x3a\x3f\x50\x8f\x89\x43\x13\xfb\xde\x5e\xe4\xef\x81\x3a\x1e\x4d\x50\x99\xf9\x22\xf6\x48\x1c\x45\x65\x06\xe0\x8d\x7a\x1d\x07\x69\x66\x35\x45\x2d\xaf\xec\xf7\x3c\x86\x0a\x9f\x4b\xd8\xea\xf3\x6d\xe6\x79\x71\xb8\x7c\xbe\xde\x25\x65\x65\x07\xaa\x3d\xf5\xf6\x8c\x6a\xca\x75\x07\xa6\x30\x77\x64\x0a\x70\x47\xee\x17\xe7\x41\xb4\xd8\xae\x85\xaa\xf9\xd4\x00\x54\xcd\x1b\x1f\xb5\x1d\xd3\x3f\x3f\x7d\xcb\xe7\x87\x50\x35\x73\xbb\x50\x35\x3b\x1a\xb4\xd8\x13\xd5\x5a\x0e\xa8\xd0\x53\xe0\xe8\x3b\x5a\x18\x78\x8e\x42\x2d\xec\x98\x25\x75\x7d\x19\xcc\x0b\x1f\xc7\x74\xa2\x6b\xa6\x85\xb6\x6c\x6c\x81\x6f\x4d\x2d\xe0\xa2\xa1\x05\x9d\x9b\x01\xf8\x1f\x00\x00\xff\xff\x60\xe4\xa5\xca\xdb\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 731, mode: os.FileMode(420), modTime: time.Unix(1557110267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

