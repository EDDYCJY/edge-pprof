// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x8f\x9b\x30\x10\x85\xef\xf3\x2b\x7c\xa1\xb7\x02\xd9\xc3\x76\x15\xc9\xaa\xb6\xda\xd2\x5c\x52\xa1\xd0\xf6\x12\x71\xf0\xe2\x21\xb1\x4a\x18\xcb\x1e\x47\xf9\xf9\x95\x21\x69\xcc\x2a\xd7\xef\x0d\x7e\xbc\x79\xb3\x57\xd6\xb6\xf0\x6a\xed\x4f\x75\x42\xf9\x5d\x1f\xb0\xae\x1d\xf5\x91\xfc\x41\xe7\x0d\x8d\xb2\xcc\xcb\x7c\x05\xbb\x30\x6e\x49\xa3\xd4\x78\x06\xd8\x7b\x74\x67\x74\x2d\x6c\x98\xed\xab\xd6\x4e\x48\x11\xc7\xca\xbc\x9c\x50\x4d\x8e\x85\x14\x2f\xe5\x4b\x09\xb0\xb7\x8e\x7a\x33\x60\x0b\x45\x21\x56\x6b\x31\x50\xa7\x86\xcf\x91\x40\xa3\xce\x18\x5f\x15\x52\xac\xa0\x76\xc4\xd4\xd1\x20\xa4\x38\x32\x5b\x0f\x1b\xf2\xbc\x12\x52\x64\x7e\x5d\x14\x99\xcf\x33\xbf\xce\xf4\x44\x9f\xee\x34\xa2\x7a\x36\xf8\xed\xe2\xb7\x85\xc6\xf7\x70\x28\x6c\x74\x2d\xae\xd6\xb0\x41\x65\x1f\xc8\x47\x54\x16\xbe\x0d\xd4\xfd\x7d\x20\xbe\x47\x0e\xdb\xc0\x78\x79\xa0\x9e\x22\x87\x1f\xe4\x28\xb0\x19\x1f\x79\x1f\x6e\x1a\x34\xa1\xef\xcd\xf5\x91\xaf\x1e\x3b\x1a\xb5\x97\x99\xfe\xc4\xe6\x84\x14\x58\x66\x1a\xe0\x0d\x7b\x15\x06\x6e\x66\x35\x2e\xa4\xbc\xb1\x5f\xf3\x98\x90\xe2\xb9\x84\xad\xba\xdc\x67\x9e\x93\xf5\xe6\xf3\x8e\xaf\xbb\xa8\xcc\x80\xb5\xc3\xde\x5c\x84\x9c\xd2\x2f\xc0\x14\x79\x41\xa6\x98\x0b\xf2\x3f\xda\x82\x2e\xed\x72\xcf\x8a\x4d\xd7\x42\xd5\x7c\x68\x0f\xaa\xe6\x8d\x4e\xca\x8c\x31\xc9\xd3\x97\x7c\x3e\xa2\xaa\x49\x2f\xa3\x6a\x76\x38\x28\x36\x67\xac\x15\x1f\x85\x14\x0e\x3d\x05\xd7\x61\xe2\x12\xff\x01\x5b\xd8\x11\x71\x3c\x96\xeb\x60\x5e\xb8\x30\xc6\xed\xdd\xe2\x26\x5a\x5a\x79\x82\xef\x55\x27\x30\xa9\x38\xa1\x1f\xaa\x4d\x94\x7b\xa5\xf0\x2f\x00\x00\xff\xff\xc6\x12\x30\x3b\x39\x03\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 825, mode: os.FileMode(420), modTime: time.Unix(1558683780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
